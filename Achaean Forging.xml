<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Forging</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Forging started</name>
				<script>forging = true
if #forge.next &gt; 0 then
table.remove(forge.next, 1)
end
disableTimer("Forge Light")</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>You place the required materials in the forge, beginning to heat them to the necessary temperature.</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>3</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Forging finished</name>
				<script>forging = false

if matches[2] == "full plate" or matches[2] == "leather armour" then
	forgeItem = "armour"
elseif matches[2] == "morning star" then
	forgeItem = "morningstar"
else
	forgeItem = matches[2]
end
enableTrigger("Forging Balance")
enableTimer("Forge Light")</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^With a final strike of the hammer, you finish forging the (.*)\.$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Forging Balance</name>
				<script>if not forgePause then
	if not anvil and forgeWhat == "anvil" then
		if #forge.next &gt; 0 then
			sendAll("place anvil", "get "..forgeItem.." from "..forgeWhat, "forge for "..forge.next[1])
			disableTrigger("Forging Balance")
		elseif #forge.next &lt; 1 then
			sendAll("place anvil", "get "..forgeItem.." from "..forgeWhat)
			disableTrigger("Forging Balance")
			for _, v in pairs(forge.comms) do
				forge.comms[_] = 0
			end
		end
	end

	if anvil or forgeWhat == "forge" then
		if #forge.next &gt; 0 then
			sendAll("get "..forgeItem.." from "..forgeWhat, "forge for "..forge.next[1])
			disableTrigger("Forging Balance")
		elseif #forge.next &lt; 1 then
			send("get "..forgeItem.." from "..forgeWhat)
			disableTrigger("Forging Balance")
			for _, v in pairs(forge.comms) do
				forge.comms[_] = 0
			end
		end
	end
elseif forgePause then
	send("get "..forgeItem.." from "..forgeWhat)
end




</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>You have recovered balance on all limbs.</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>3</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Forging interupted</name>
				<script>enableTrigger("Forge Again")
enableTimer("Forge Light")</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>You lay down your hammer and cease working on your creation.</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>3</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Forge Again</name>
				<script>if anvil == true and forgeWhat == "anvil" then
	sendAll("place anvil", "forge")
else
	send("forge")
end
disableTrigger("Forge Again")</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>You have recovered balance on all limbs.</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>3</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Anvil Placed</name>
				<script>anvil = true</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>You set A portable anvil down.</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>3</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Anvil Returned</name>
				<script>anvil = false</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>A portable anvil has returned to your inventory.</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>3</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Forge lit</name>
				<script>enableTimer("Forge Light")</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>You light the forge and work the bellows until it is burning hotly.</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>3</integer>
				</regexCodePropertyList>
			</Trigger>
		</TriggerGroup>
	</TriggerPackage>
	<TimerPackage>
		<TimerGroup isActive="yes" isFolder="yes" isTempTimer="no" isOffsetTimer="no">
			<name>Forging</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<time>00:00:00.000</time>
			<Timer isActive="no" isFolder="no" isTempTimer="no" isOffsetTimer="no">
				<name>ForgeLit</name>
				<script>disableTimer("ForgeLit")
forgeLight = false</script>
				<command></command>
				<packageName></packageName>
				<time>00:02:00.000</time>
			</Timer>
		</TimerGroup>
	</TimerPackage>
	<AliasPackage>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Forging</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>Forging Add Double</name>
				<script>cecho("\n&lt;grey&gt;[&lt;orange&gt;Forging&lt;grey&gt;]:&lt;red&gt; "..matches[2].." "..matches[3]:lower().." "..matches[4]:lower().." "..matches[5]:lower().."'s added to forging order.")
local count = tonumber(matches[2])
for i=1, count do
	table.insert(forge.next, matches[3]:lower().. " " ..matches[4]:lower().. " ".. matches[5]:lower())
	forge.outrComms(matches[5]:lower(), matches[3]:lower(), matches[4]:lower())
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^forge (\d+) (\S+) (\S+) (\S+)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Forging Stop</name>
				<script>forge.next = {}

for _, v in pairs(forge.comms) do
	forge.comms[_] = 0
end

cecho("\n&lt;grey&gt;[&lt;orange&gt;Forging&lt;grey&gt;]:&lt;red&gt; Cleared forging order and will finish current item being forged.")</script>
				<command></command>
				<packageName></packageName>
				<regex>^stop forging$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Start Forging</name>
				<script>for i,v in pairs(forge.comms) do
	if tonumber(v) &gt; 0 then
		if outrComms == true then
			send(string.format("outr %s %s", v, i))
		end
	end
end

if svo then 
	if svo.defc.selfishness then
		svo.defs.keepup("selfishness", false)
		if forgeWhat == "anvil" then
			tempTimer(1, [[sendAll("place anvil", "outr coal", "put coal in "..forgeWhat, "fire forge")]])
			tempTimer(2, [[svo.defs.keepup("selfishness",true)]])
			tempTimer(3, [[send("forge for "..forge.next[1])]])
		elseif forgeWhat == "forge" then
			tempTimer(1, [[sendAll("outr coal", "put coal in "..forgeWhat, "fire forge")]])
			tempTimer(2, [[svo.defs.keepup("selfishness",true)]])
			tempTimer(3, [[send("forge for "..forge.next[1])]])
		end
	end
	if not svo.defc.selfishness then
		if forgeWhat == "anvil" then
			sendAll("place anvil", "outr coal", "put coal in "..forgeWhat, "fire forge", "forge for "..forge.next[1])
		elseif forgeWhat == "forge" then
			sendAll("outr coal", "put coal in "..forgeWhat, "fire forge", "forge for "..forge.next[1])
		end
	end
end
if not svo then
	if forgeWhat == "anvil" then
		sendAll("place anvil", "outr coal", "put coal in "..forgeWhat, "fire forge", "forge for "..forge.next[1])
	elseif forgeWhat == "forge" then
		sendAll("outr coal", "put coal in "..forgeWhat, "fire forge", "forge for "..forge.next[1])
	end
end
</script>
				<command></command>
				<packageName></packageName>
				<regex>^forge$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Forging Add Single</name>
				<script>cecho("\n&lt;grey&gt;[&lt;orange&gt;Forging&lt;grey&gt;]:&lt;red&gt; "..matches[2].." "..matches[3].." "..matches[4].."'s added to forging order.")
local count = tonumber(matches[2])
for i=1, count do
	table.insert(forge.next, matches[3]:lower().. " " ..matches[4]:lower())
	forge.outrComms(matches[4]:lower(), matches[3]:lower())
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^forge (\d+) (\S+) (\S+)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Forging Add none</name>
				<script>cecho("\n&lt;grey&gt;[&lt;orange&gt;Forging&lt;grey&gt;]:&lt;red&gt;  "..matches[2].." "..matches[3].."'s added to forging order.")
local count = tonumber(matches[2])
for i=1, count do
	table.insert(forge.next, matches[3]:lower())
	forge.outrComms(matches[3]:lower())
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^forge (\d+) (\S+)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Forging order</name>
				<script>--Display the current order
cecho("\n&lt;grey&gt;[&lt;orange&gt;Forging&lt;grey&gt;]:&lt;red&gt; Current Order:\n")
local forgesum = {}
for _,v in ipairs(forge.next) do
	forgesum[v] = (forgesum[v] or 0)+1
end
--cecho("&lt;white&gt;\n" ..table.concat(forge.next, "\n"))
for i,v in pairs(forgesum) do
	cecho(string.format("&lt;white&gt;%s: %s\n", i, v))
end

--Display comms needed for order
cecho("\n&lt;grey&gt;[&lt;orange&gt;Forging&lt;grey&gt;]:&lt;red&gt; Total comms needed:")
for i,v in pairs(forge.comms) do
	if tonumber(v) &gt; 0 then
		cecho(string.format("&lt;white&gt;\n%s: %s", i, v))
	end
end

</script>
				<command></command>
				<packageName></packageName>
				<regex>^forging order$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Display Help</name>
				<script>cecho("\n&lt;grey&gt;[&lt;orange&gt;Forging&lt;grey&gt;]:&lt;red&gt; Script Help:")
cecho("&lt;white&gt;\n" ..table.concat(forge.help, "\n"))
</script>
				<command></command>
				<packageName></packageName>
				<regex>^forgehelp$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Clear order</name>
				<script>forge.next = {}

for _, v in pairs(forge.comms) do
	forge.comms[_] = 0
end

cecho("\n&lt;grey&gt;[&lt;orange&gt;Forging&lt;grey&gt;]:&lt;red&gt; Cleared forging order.")</script>
				<command></command>
				<packageName></packageName>
				<regex>^fclear$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Forge settings</name>
				<script>forgeSettings()</script>
				<command></command>
				<packageName></packageName>
				<regex>^fsettings</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Forging pause</name>
				<script>if forgePause == nil or forgePause == false then
	cecho("\n&lt;grey&gt;[&lt;orange&gt;Forging&lt;grey&gt;]:&lt;red&gt; Order Paused.")
	forgePause = true
elseif forgePause == true then
	cecho("\n&lt;grey&gt;[&lt;orange&gt;Forging&lt;grey&gt;]:&lt;red&gt; Order Unpaused.")
	forgePause = false
	if #forge.next &gt; 0 then
		if svo then 
			if svo.defc.selfishness then
				svo.defs.keepup("selfishness", false)
				if forgeWhat == "anvil" then
					tempTimer(1, [[sendAll("place anvil", "outr coal", "put coal in "..forgeWhat, "fire forge")]])
					tempTimer(2, [[svo.defs.keepup("selfishness",true)]])
					tempTimer(3, [[send("forge for "..forge.next[1])]])
				elseif forgeWhat == "forge" then
					tempTimer(1, [[sendAll("outr coal", "put coal in "..forgeWhat, "fire forge")]])
					tempTimer(2, [[svo.defs.keepup("selfishness",true)]])
					tempTimer(3, [[send("forge for "..forge.next[1])]])
				end
			end
			if not svo.defc.selfishness then
				if forgeWhat == "anvil" then
					sendAll("place anvil", "outr coal", "put coal in "..forgeWhat, "fire forge", "forge for "..forge.next[1])
				elseif forgeWhat == "forge" then
					sendAll("outr coal", "put coal in "..forgeWhat, "fire forge", "forge for "..forge.next[1])
				end
			end
		end
		if not svo then
			if forgeWhat == "anvil" then
				sendAll("place anvil", "outr coal", "put coal in "..forgeWhat, "fire forge", "forge for "..forge.next[1])
			elseif forgeWhat == "forge" then
				sendAll("outr coal", "put coal in "..forgeWhat, "fire forge", "forge for "..forge.next[1])
			end
		end
	end
end

</script>
				<command></command>
				<packageName></packageName>
				<regex>^fpause$</regex>
			</Alias>
		</AliasGroup>
	</AliasPackage>
	<ActionPackage />
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Forging</name>
			<packageName></packageName>
			<script>--Version 19.7.8
--Author Qwindor Rousseau
--Thanks to Jhui for helping me with some of the harder scripting to make it get the right values for the descriptors
--Also thank you Seragorn for helping me clean up the forging order display and adding of multiple items in one command</script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>Forging script</name>
				<packageName></packageName>
				<script>cecho("\n&lt;grey&gt;[&lt;orange&gt;Forging&lt;grey&gt;]:&lt;red&gt; Script loaded. Use forgehelp to list the commands.")

local forgeSetting = {
	choice = "forge",
	rift = false
}

function forgeSettings(setting,value)
	if not setting and not value then
		echo("\nYou may change the following:\n")
		echo(string.rep("-",29).."\n  ")
	
		if forgeSetting.rift == false then 
			cechoLink("&lt;firebrick&gt;Won't", [[forgeSettings("rift",true)]], "Click if you want to outr", true)
		else 
			cechoLink("&lt;lawn_green&gt;Will",[[forgeSettings("rift",false)]], "Click here if you do not want to outr",true)
		end
		echo(" outrift\n  ")

		echo("Using ")
		if forgeSetting.choice == "forge" then 
			cechoLink("&lt;green&gt;forge\n  ",[[forgeSettings("choice","anvil")]], "Click here if you would rather use anvil",true)
		else 
			cechoLink("&lt;slate_grey&gt;anvil\n  ",[[forgeSettings("choice","forge")]], "Click here if you would rather use forge",true)
		end

		if svo then 
			svo.showprompt()
			forgeSave() 
		else 
			send("") 
			forgeSave()
		end

	else
		forgeSetting[setting] = value
		forgeSettings()
	end
	forgeWhat = forgeSetting.choice
	outrComms = forgeSetting.rift
end



forge = {
	next = {
	},

	size = {
		dirk            = "1",
		spear           = "3",
		shortsword      = "1",
		axe             = "3",
		dagger          = "1",
		whip            = "2",
		lash            = "1",
		talons          = "1",
		morningstar     = "6",
		warhammer       = "7",
		rapier          = "4",
		javelin         = "1",
		flail           = "6",
		trident         = "3",
		battleaxe       = "5",
		bastard         = "7",
		lance           = "8",
		scimitar        = "5",
		broadsword      = "6",
		longsword       = "6",
		buckler         = "1",
		leatherarmour   = "3",
		cavalry         = "1",
		ringmail        = "3",
		banded          = "1",
		scalemail       = "8",
		kite            = "1",
		chainmail       = "8",
		tower           = "1",
		splintmail      = "9",
		fieldplate      = "10",
		fullplate       = "11",
		tank            = "1",
		cloth				 = "2"
	},

	base = {
		dirk            = { {1, "iron"}, {2, "steel"} },
		spear           = { {4, "wood"}, {3, "steel"} },
		shortsword      = { {1, "leather"}, {2, "steel"} },
		axe             = { {3, "iron"}, {3, "wood"} },
		dagger          = { {1, "iron"}, {1, "steel"}, {2, "obsidian"} },
		whip            = { {1, "iron"}, {5, "leather"}, {2, "wood"} },
		lash            = { {1, "iron"}, {5, "leather"}, {1, "wood"} },
		talons          = { {2, "leather"}, {2, "steel"} },
		morningstar     = { {3, "iron"}, {3, "steel"}, {1, "wood"} },
		warhammer       = { {5, "steel"}, {3, "wood"} },
		rapier          = { {5, "steel"} },
		javelin         = { {1, "obsidian"}, {3, "wood"} },
		flail           = { {3, "iron"}, {3, "steel"}, {1, "wood"} },
		trident         = { {3, "steel"}, {4, "wood"} },
		battleaxe       = { {7, "steel"}, {1, "leather"}, {1, "wood"} },
		bastard         = { {2, "leather"}, {8, "steel"} },
		lance           = { {2, "steel"}, {5, "wood"} },
		scimitar        = { {1, "leather"}, {8, "steel"} },
		broadsword      = { {1, "leather"}, {8, "steel"} },
		longsword       = { {1, "leather"}, {8, "steel"} },
		buckler         = { {1, "leather"}, {1, "steel"} },
		leatherarmour   = { {10, "leather"} },
		cavalry         = { {2, "leather"}, {1, "steel"} },
		ringmail        = { {5, "leather"}, {3, "steel"} },
		banded          = { {1, "leather"}, {2, "steel"} },
		scalemail       = { {5, "leather"}, {6, "steel"} },
		kite            = { {1, "leather"}, {3, "steel"} },
		chainmail       = { {6, "cloth"}, {12, "steel"} },
		tower           = { {1, "leather"}, {4, "steel"} },
		splintmail      = { {5, "leather"}, {18, "steel"} },
		fieldplate      = { {8, "cloth"}, {34, "steel"} },
		tank            = { {25, "steel"} },
		fullplate       = { {10, "leather"}, {100, "steel"}, {10, "gold"}, {10, "cloth"} },
		cloth				 = { {12, "cloth"} },
		pry					 = { {5, "steel"} }
	},

	descriptor = {
		jagged              = { {2, "iron"} },
		solid               = { {1, "steel"} },
		["rune-etched"]     = { {2, "gems"}, {4, "steel"} },
		["soot-covered"]    = { {1, "coal"} },
		sooty               = { {1, "coal"} },
		steel               = { {1, "steel"} },
		sturdy              = { {1, "steel"} },
		balanced            = { {2, "iron"} },
		barbed              = { {2, "iron"} },
		beefy               = { {1, "steel"} },
		begrimed            = { {1, "iron"}, {3, "coal"} },
		beveled             = { {1, "steel"} },
		big                 = { {1, "steel"} },
		brawny              = { {1, "steel"} },
		bulky               = { {3, "iron"} },
		costly              = { {2, "gold"} },
		daunting            = { {1, "steel"} },
		["double-edged"]    = { {1, "steel"} },
		["double-sided"]    = { {1, "steel"} },
		durable             = { {2, "iron"} },
		gaudy               = { {1, "gold"} },
		grim                = { {2, "iron"} },
		hardy               = { {2, "iron"} },
		heavy               = { {1, "steel"} },
		hefty               = { {1, "iron"} },
		honed               = { {1, "steel"} },
		hooked              = { {2, "iron"} },
		["iron-tipped"]     = { {2, "iron"} },
		keen                = { {2, "iron"} },
		large               = { {1, "steel"} },
		molted              = { {1, "steel"} },
		polished            = { {1, "steel"} },
		ponderous           = { {1, "steel"} },
		resilient           = { {1, "steel"} },
		rippled             = { {1, "steel"} },
		poinded             = { {2, "iron"} },
		rugged              = { {2, "iron"} },
		["single-edged"]    = { {1, "steel"} },
		sinuous             = { {3, "leather"} },
		sizable             = { {1, "steel"} },
		sleek               = { {1, "steel"} },
		slender             = { {1, "steel"} },
		stout               = { {2, "iron"} },
		supple              = { {3, "leather"} },
		tempered            = { {1, "steel"} },
		undulating          = { {3, "leather"} },
		["well-made"]       = { {1, "steel"} },
		winding             = { {3, "leather"} },
		ashtani             = { {1, "steel"}, {2, "iron"} },
		hashani             = { {1, "steel"}, {2, "iron"} },
		cyrenian            = { {4, "iron"} },
		eleusian            = { {3, "wood"} },
		mhaldorian          = { {3, "obsidian"}, {2, "iron"} },
		baleful             = { {2, "iron"}, {2, "steel"} },
		ceremonial          = { {2, "silver"} },
		cruel               = { {3, "iron"}, {1, "steel"} },
		delosian            = { {3, "iron"}, {1, "steel"} },
		desert              = { {3, "obsidian"}, {1, "steel"}, {4, "bone"} },
		eastern             = { {1, "platinum"} },
		elegant             = { {1, "silver"}, {1, "steel"} },
		etched              = { {2, "steel"} },
		fancy               = { {1, "gold"} },
		flashy              = { {1, "gold"} },
		graceful            = { {1, "steel"}, {1, "silver"} },
		grandiose           = { {2, "gold"} },
		impressive          = { {2, "steel"} },
		["knife-edged"]     = { {2, "steel"} },
		lovely              = { {2, "silver"} },
		lustrous            = { {1, "silver"} },
		menacing            = { {1, "steel"}, {2, "iron"} },
		northern            = { {4, "iron"} },
		["obsidian-tipped"] = { {8, "obsidian"} },
		ominous             = { {1, "steel"}, {2, "iron"}, {2, "obsidian"} },
		ornamental          = { {1, "gems"} },
		ostentatious        = { {1, "gems"}, {1, "gold"}, {1, "platinum"} },
		peshwari            = { {1, "silver"}, {1, "gold"} },
		puissant            = { {2, "steel"}, {1, "iron"} },
		["razor-sharp"]     = { {2, "steel"} },
		savage              = { {1, "steel"}, {3, "iron"} },
		["saw-edged"]       = { {1, "steel"}, {2, "iron"} },
		serrated            = { {1, "steel"}, {2, "iron"} },
		shining             = { {1, "steel"}, {1, "silver"} },
		siroccian           = { {6, "obsidian"}, {2, "iron"} },
		snaky               = { {5, "leather"} },
		southern            = { {2, "steel"} },
		spiked              = { {3, "iron"} },
		splendid            = { {1, "steel"}, {1, "silver"} },
		["steel-tipped"]    = { {2, "steel"} },
		theran              = { {2, "steel"} },
		twisted             = { {5, "leather"} },
		unnerving           = { {1, "obsidian"}, {2, "iron"} },
		vashnari            = { {6, "iron"} },
		western             = { {1, "steel"}, {1, "iron"} },
		barbaric            = { {18, "iron"} },
		barbarous           = { {18, "iron"} },
		beautiful           = { {4, "silver"}, {7, "gold"}, {3, "platinum"}, {7, "steel"} },
		bejeweled           = { {1, "steel"}, {1, "gems"} },
		bronzed             = { {4, "steel"}, {6, "iron"} },
		charred             = { {12, "coal"}, {8, "iron"} },
		delicate            = { {2, "silver"}, {2, "platinum"} },
		fearsome            = { {6, "steel"}, {7, "iron"} },
		formidable          = { {4, "steel"}, {4, "iron"} },
		gleaming            = { {4, "steel"}, {4, "silver"} },
		glorious            = { {3, "steel"} },
		grand               = { {4, "steel"}, {2, "gold"}, {2, "platinum"} },
		gruesome            = { {6, "steel"}, {8, "iron"} },
		intimidating        = { {6, "steel"}, {6, "iron"} },
		ornate              = { {2, "platinum"}, {2, "gold"} },
		["rune-carved"]     = { {4, "steel"}, {2, "gems"} },
		scorched            = { {12, "coal"}, {8, "iron"} },
		sinister            = { {4, "steel"}, {8, "obsidian"} },
		stunning            = { {4, "steel"}, {2, "gold"} },
		brutal              = { {18, "iron"} },
		powerful            = { {7, "steel"}, {6, "iron"} },
		shimmering          = { {1, "silver"}, {2, "gold"}, {2, "platinum"} },
		vicious             = { {16, "iron"} },
		wicked              = { {6, "steel"}, {8, "iron"} },
		serpentine          = { {19, "leather"} },
		blackened           = { {70, "coal"}, {30, "iron"} },
		blue                = { {2, "lacquer"}, {30, "blueink"} },
		brown               = { {2, "lacquer"}, {60, "redink"}, {8, "yellowink"} },
		colossal            = { {15, "steel"}, {23, "iron"} },
		dazzling            = { {4, "silver"}, {5, "gems"}, {6, "steel"} },
		deadly              = { {15, "steel"}, {18, "iron"} },
		devastating         = { {20, "steel"}, {20, "iron"} },
		enormous            = { {17, "steel"}, {22, "iron"} },
		exquisite           = { {10, "steel"}, {4, "platinum"}, {8, "silver"} },
		extravagant         = { {11, "gold"}, {6, "platinum"} },
		flawless            = { {30, "steel"} },
		gigantic            = { {17, "steel"}, {22, "iron"} },
		gilded              = { {21, "gold"} },
		gorgeous            = { {7, "steel"}, {7, "gold"}, {7, "platinum"} },
		green               = { {15, "greenink"}, {2, "lacquer"} },
		grey                = { {2, "lacquer"} },
		huge                = { {15, "steel"}, {19, "iron"} },
		immense             = { {15, "steel"}, {23, "iron"} },
		indomitable         = { {15, "steel"}, {22, "iron"} },
		mammoth             = { {18, "steel"}, {21, "iron"} },
		massive             = { {15, "steel"}, {20, "iron"} },
		mighty              = { {19, "steel"}, {19, "iron"} },
		monstrous           = { {21, "steel"}, {18, "iron"} },
		orange              = { {10, "yellowink"}, {20, "redink"}, {2, "lacquer"} },
		overpowering        = { {18, "steel"}, {20, "iron"} },
		perfect             = { {30, "steel"} },
		pink                = { {2, "lacquer"}, {80, "redink"} },
		purple              = { {2, "lacquer"}, {7, "purpleink"} },
		radiant             = { {8, "platinum"}, {9, "gold"} },
		red                 = { {2, "lacquer"}, {80, "redink"} },
		tan                 = { {15, "redink"}, {15, "yellowink"}, {2, "lacquer"} },
		violet              = { {20, "redink"}, {5, "purpleink"}, {2, "lacquer"} },
		white               = { {3, "lacquer"} },
		yellow              = { {2, "lacquer"}, {20, "yellowink"} },
		alabaster           = { {6, "lacquer"} },
		amber               = { {4, "lacquer"}, {22, "yellowink"} },
		azure               = { {4, "lacquer"}, {35, "blueink"} },
		black               = { {4, "lacquer"}, {25, "blackink"} },
		["bone-white"]      = { {4, "lacquer"}, {70, "bone"} },
		cerulean            = { {13, "greenink"}, {18, "blueink"}, {4, "lacquer"} },
		crimson             = { {50, "redink"}, {4, "lacquer"} },
		diabolical          = { {22, "gems"} },
		["diamond-edged"]   = { {40, "blackink"}, {5, "lacquer"} },
		golden              = { {18, "gold"}, {5, "lacquer"} },
		heavenly            = { {22, "steel"}, {15, "gold"}, {15, "platinum"} },
		indigo              = { {9, "purpleink"}, {4, "lacquer"} },
		ivory               = { {6, "lacquer"} },
		["jet-black"]       = { {40, "blackink"}, {5, "lacquer"} },
		nightmarish         = { {25, "steel"}, {20, "obsidian"}, {50, "iron"} },
		ochre               = { {12, "yellowink"}, {40, "redink"}, {4, "lacquer"} },
		scarlet             = { {4, "lacquer"}, {75, "redink"} },
		silver              = { {3, "lacquer"}, {20, "silver"} },
		["skull-festooned"] = { {220, "bone"} },
		turquoise           = { {4, "lacquer"}, {15, "greenink"} },
		vermillion          = { {4, "lacquer"}, {75, "redink"} },
		targossian          = { {2, "steel"} }
	},

	comms = {
		bone      = "0",
		coal      = "0",
		gold      = "0",
		lacquer   = "0",
		steel     = "0",
		leather   = "0",
		platinum  = "0",
		wood      = "0",
		cloth     = "0",
		gems      = "0",
		iron      = "0",
		obsidian  = "0",
		silver    = "0",
		redink    = "0",
		blueink   = "0",
		greenink  = "0",
		yellowink = "0",
		purpleink = "0",
		goldink   = "0",
		blackink  = "0"
	},

	help = {
		"The following aliases are used for this forging script.",
		" ",
		"This alias will add the item to the order:",
		"\-\- forge &lt;number&gt; &lt;first desc/item&gt; &lt;second desc/item&gt; &lt;item&gt; \-\-",
		"The first variable will be how many you want to forge.",
		"The second variable will either be your first descriptor or the thing being forged with no descriptors.",
		"Third one will either be the second descriptor or the item being forged with one descriptor.",
		"Obviously the last variable will be the item being forged only.",
		" ",
		"To display your current forging order use:",
		"\-\- forging order \-\-",
		"This will also display the amount of comms needed for your current order.",
		" ",
		"To clear your current forging order use:",
		"\-\- fclear \-\-",
		" ",
		"To stop the order while in the middle of it use:",
		"\-\- stop forging \-\-",
		"Warning if you stop mid order you will need to redo your order again as it will clear it",
		" ",
		"Finally to start your order use:",
		"\-\- forge \-\-",
		"Make sure you drop selfishness if you dont have svof.",
		" ",
		"To pause your order use:",
		"\-\- fpause \-\-",
		"This will pause the order after you finish forging the current item.",
		" ",
		"To change if you want to outr your comms and to use an anvil or a forge use:",
		"\-\- fsettings \-\-",
		" ",
		"Special thanks to Jhui and Seragorn for being patient with me and helping me get this working correctly.",
		" ",
		"Version 16.5.28"
	},
		
	
	-- use in alias with forge.outrComms(matches[2], matches[3], matches[4]) for 3 input alias
	-- and forge.outrComms(matches[2], matches[3]) for 2 input alias
	outrComms = function(item, descriptor1, descriptor2)
		local size = tonumber(forge.size[item])
		local base_comms = forge.base[item]
		local desc_comms = nil
		
		local outr_cmd = {}
		
		-- adding base comms
		for _, v in pairs(base_comms) do
			forge.comms[v[2]] = forge.comms[v[2]] + v[1]
		end
		
		if descriptor1 ~= nil then
			desc_comms = forge.descriptor[descriptor1] or {}

			--add desc multiplier comms
			for _, v in pairs(desc_comms) do
				local amt = v[1]*size
				
				forge.comms[v[2]] = forge.comms[v[2]] + amt
			end
		end
		
		if descriptor2 ~= nil then
			desc_comms = forge.descriptor[descriptor2] or {}
			--outr desc2 multipliers
			for _, v in pairs(desc_comms) do
				local amt = v[1]*size
			
				forge.comms[v[2]] = forge.comms[v[2]] + amt
			end
		end
		
	end
}



function forgeSave()
	table.save(getMudletHomeDir().."/forgesettings.lua", forgeSetting)
	--cecho("\n&lt;grey&gt;[&lt;orange&gt;Forging&lt;grey&gt;]: settings saved.")
end

function forgeLoad()
	table.load(getMudletHomeDir().."/forgesettings.lua", forgeSetting)
	--cecho("\n&lt;grey&gt;[&lt;orange&gt;Forging&lt;grey&gt;]: settings loaded.")
end

--forgeLoad()</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
	</ScriptPackage>
	<KeyPackage />
	<HelpPackage>
		<helpURL></helpURL>
	</HelpPackage>
</MudletPackage>
